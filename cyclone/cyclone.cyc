#include <stdio.h>
#include <stdlib.h>

int e, d, n;

// Coprimarity
int gcd(int a, int b);

// Inverse of the rest of the Euclidean division
int inverse(int a, int b);

// Find the ciphered/deciphered character
int FindT(int a, int m, int n);

// Fast Modulo Multiplication
void FastExponention(int bit, int n, int *@notnull @numelts(1) y, int *@notnull @numelts(1) a);

// KEY-ENCRYPTION-DECRYPTION
void KeyGenerationNoRand(); // Cyclone without random numbers
void Encryption(int value, FILE *@notnull out);
void Decryption(int value, FILE *@notnull out);

// Safe clone strings
char *@notnull @fat strclone(const char *@notnull @fat src);

// Coprimarity
int gcd(int a, int b) {
	int q, r1, r2, r;

	if (a > b) {
		r1 = a;
		r2 = b;
	} else {
		r1 = b;
		r2 = a;
	}

	while (r2 > 0) {
		q = r1 / r2;
		r = r1 - q * r2;
		r1 = r2;
		r2 = r;
	}

	return r1;
}

// Inverse of the rest of the Euclidean division
int inverse(int a, int b) {
	int inv;
	int q, r, r1 = a, r2 = b, t, t1 = 0, t2 = 1;

	while (r2 > 0) {
		q = r1 / r2;
		r = r1 - q * r2;
		r1 = r2;
		r2 = r;

		t = t1 - q * t2;
		t1 = t2;
		t2 = t;
	}

	if (r1 == 1)
		inv = t1;

	if (inv < 0)
		inv = inv + a;

	return inv;
}

// Find the ciphered/deciphered character
int FindT(int a, int m, int n) {
	int r;
	int y = 1;

	while (m > 0) {
		r = m % 2;
		FastExponention(r, n, &y, &a);
		m = m / 2;
	}
	return y;
}

// Fast Modulo Multiplication
void FastExponention(int bit, int n, int *@notnull @numelts(1) y, int *@notnull @numelts(1) a) {
	if (bit == 1)
		*y = (*y * (*a)) % n;

	*a = (*a) * (*a) % n;
}

void KeyGenerationNoRand() {
	int p, q;
	int phi_n;
	
	p = 23; // Fixed
	q = 53; // Fixed

	n = p * q;
	phi_n = (p - 1) * (q - 1);

	do
		e = rand() % (phi_n - 2) + 2; // 1 < e < phi_n
	while (gcd(e, phi_n) != 1);

	d = inverse(phi_n, e);
}

void Encryption(int value, FILE *@notnull out) {
	int cipher;
	cipher = FindT(value, e, n);
	fprintf((FILE@) out, "%d ", cipher);
}

void Decryption(int value, FILE *@notnull out) {
	int decipher;
	decipher = FindT(value, d, n);
	fprintf((FILE@) out, "%c", decipher);
}

// Safe clone strings
char *@notnull @fat strclone(const char *@notnull @fat src) {
    int n = numelts(src);
	
    char *@notnull @fat dst = calloc(n, sizeof(char));
	
	for (int i = 0; i < n; i++)
		*(dst+i) = *(src+i);
    return dst;
}

int main(void) {
	FILE *@notnull inp, *@notnull out;
	char *@notnull @fat @zeroterm str = calloc(1000, sizeof(char));

	// Destroy contents of these files (from previous runs, if any)
	out = (FILE@) fopen("cipher.txt", "w+");
	fclose((FILE@) out);
	out = (FILE@) fopen("decipher.txt", "w+");
	fclose((FILE@) out);

	KeyGenerationNoRand(); // Prime numbers not random
	
	// Used to highlight the characteristics of cyclone
	str = strclone("Gino Pino");
	printf("%s", str);

	out = (FILE@) fopen("cipher.txt", "w+");
	if ((FILE@) out == NULL) {
		printf("Error opening destination file\n");
		exit(1);
	}

	// Encryption starts
	int i = 0;
	while (*(str + i) != '\0') {
		char ch = *(str + i);
		if (ch == -1)
			break;
		int value = ch;
		Encryption(value, (FILE@) out);
		i++;
	}
	
	free(str);

	fclose((FILE@) out);

	inp = (FILE@) fopen("cipher.txt", "r");
	if ((FILE@) inp == NULL) {
		printf("Error opening cipher text\n");
		exit(1);
	}

	out = (FILE@) fopen("decipher.txt", "w+");
	if ((FILE@) out == NULL) {
		printf("Error opening file\n");
		exit(1);
	}

	// Decryption starts
	while (1) {
		int cip;
		if (fscanf((FILE@) inp, "%d", &cip) == -1)
			break;
		Decryption(cip, (FILE@) out);
	}
	
	fclose((FILE@) out);

	return 0;
}